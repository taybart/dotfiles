############################################################
######################## OPTIONS ###########################
############################################################
set -g status-interval 1
set -s escape-time 10
set -g mouse on
set -g history-limit 5000
set -g focus-events on
# loud or quiet?
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
setw -g monitor-activity off
set -g bell-action none
setw -g xterm-keys on

set -g remain-on-exit off

# Don't exit copy mode when mouse drags
unbind -T copy-mode-vi MouseDragEnd1Pane
bind -T copy-mode-vi Escape send-keys -X cancel

set -g default-terminal "xterm-256color"
set -sa terminal-overrides ",xterm-256color:RGB"

############################################################
######################## STATUS ############################
############################################################
### Status bar
set -g status-position top
set -g status-keys vi
# set -g status-bg colour236
set -g status-bg "#1d2837"
set -g status-fg white

set -g status-left-length 15
set -g status-right-length 55
# set -g status-left "#[fg=white,bright,bg=colour20] #(hostname) #[fg=colour20,bg=default]#[default]"
set -g status-left "#[fg=#fabc2e,bg=#83a597] #(hostname -s) #[fg=#83a597,bg=default]#[default]"
set -g status-right "#[default]#[fg=#83a597,bg=default]#[fg=#fabc2e,bg=#83a597] %Y-%m-%d #(TZ=America/Denver date +%%H:%%M:%%S) #[fg=#fa1e05][#(TZ="Etc/UTC" date +%%H)]#[default]"

# Window Status
setw -g window-status-format " #[fg=colour243]#W "
# setw -g window-status-current-format " #[fg=colour236,bg=colour20]#[fg=white,bright] #W #[fg=colour20,bg=default] "
setw -g window-status-current-format "#[fg=#1d2837,bg=#83a597]#[fg=#fabc2e] #W #[fg=#83a597,bg=default]"


# light status
bind b set -g status-bg colour255\; setw -g window-status-current-format " #[fg=colour255,bg=colour20]#[fg=white,bright] #W #[fg=colour20,bg=default] "

# macos fix
# if-shell "uname | grep -q Darwin" "set-option -g default-command \"reattach-to-user-namespace -l zsh\"" "set -g default-terminal \"screen-256color\""

############################################################
####################### KEYBINDINGS ########################
############################################################

is_vim_pane_no_mode="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$' \
    && [ '#{pane_in_mode}' -eq 0 ]"

# prefix binding
unbind C-b
set -g prefix C-f
bind C-f send-prefix

# Reload source
unbind r
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

############################################################
######################## SPLITS ############################
############################################################
# Window Splitting
unbind %
bind | split-window -h -f -c '#{pane_current_path}'
bind \\ split-window -h -c '#{pane_current_path}'
bind _ split-window -v -f -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'

# Swap pane
bind -n M-h swap-window -t -1\; select-window -t -1
bind -n M-l swap-window -t +1\; select-window -t +1

# Resizing
bind J resize-pane -D 15
bind K resize-pane -U 15
bind L resize-pane -R 15
bind H resize-pane -L 15

# bind -n C-k if-shell "$is_vim_pane_no_mode" 'send-keys C-k' 'send-keys -R; send-keys C-l; clear-history'
bind -n C-k if-shell "$is_vim_pane_no_mode" 'send-keys C-k' 'send-keys -R; send-keys C-l'

############################################################
####################### LABELS #############################
############################################################
# Rename Window 
unbind R
bind R command-prompt "rename-window %%"
# Pane titles
unbind t
bind t setw pane-border-status
set -g pane-border-format "#{pane_title}"
# Rename pane
unbind T
bind T command-prompt -p "(rename-pane)" -I "#T" "select-pane -T '%%'"

############################################################
####################### NAVIGATION #########################
############################################################
### Motion
# Smart pane switching with awareness of vim splits
bind h if-shell "$is_vim_pane_no_mode" 'send-keys C-f Left'  'select-pane -L'
bind j if-shell "$is_vim_pane_no_mode" 'send-keys C-f Down'  'select-pane -D'
bind k if-shell "$is_vim_pane_no_mode" 'send-keys C-f Up'    'select-pane -U'
bind l if-shell "$is_vim_pane_no_mode" 'send-keys C-f Right' 'select-pane -R'

############################################################
####################### PROBATION ##########################
############################################################
# popup for note taking
bind i display-popup -E 'cd ~/.notes && nvim journey.md'
# git TODO: actually use this
bind g display-popup -E -d '#{pane_current_path}' 'git status && zsh'
# rest
bind s display-popup -E -d '#{pane_current_path}'

# local changes?
if-shell '[[ -f ~/.tmux.conf.local ]]' 'source-file ~/.tmux.conf.local'
